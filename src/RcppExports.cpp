// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dKernel
arma::colvec dKernel(arma::mat const& grid, arma::mat const& obs, arma::vec const& probs, arma::mat const& rooti);
RcppExport SEXP _chocR_dKernel(SEXP gridSEXP, SEXP obsSEXP, SEXP probsSEXP, SEXP rootiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type rooti(rootiSEXP);
    rcpp_result_gen = Rcpp::wrap(dKernel(grid, obs, probs, rooti));
    return rcpp_result_gen;
END_RCPP
}
// get_root_i
arma::mat get_root_i(arma::mat const& chol);
RcppExport SEXP _chocR_get_root_i(SEXP cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type chol(cholSEXP);
    rcpp_result_gen = Rcpp::wrap(get_root_i(chol));
    return rcpp_result_gen;
END_RCPP
}
// rKernel
arma::mat rKernel(int n, arma::mat x, arma::mat chol, Rcpp::Nullable<Rcpp::NumericVector> probs);
RcppExport SEXP _chocR_rKernel(SEXP nSEXP, SEXP xSEXP, SEXP cholSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type chol(cholSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(rKernel(n, x, chol, probs));
    return rcpp_result_gen;
END_RCPP
}
// computeChoc
arma::vec computeChoc(arma::mat const& grid, Rcpp::List const& list_data, Rcpp::List const& list_weights, arma::mat const& rooti);
RcppExport SEXP _chocR_computeChoc(SEXP gridSEXP, SEXP list_dataSEXP, SEXP list_weightsSEXP, SEXP rootiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< Rcpp::List const& >::type list_data(list_dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List const& >::type list_weights(list_weightsSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type rooti(rootiSEXP);
    rcpp_result_gen = Rcpp::wrap(computeChoc(grid, list_data, list_weights, rooti));
    return rcpp_result_gen;
END_RCPP
}
// computeIvlev
arma::vec computeIvlev(arma::vec const& realised, arma::vec const& avalaible);
RcppExport SEXP _chocR_computeIvlev(SEXP realisedSEXP, SEXP avalaibleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type realised(realisedSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type avalaible(avalaibleSEXP);
    rcpp_result_gen = Rcpp::wrap(computeIvlev(realised, avalaible));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_chocR_dKernel", (DL_FUNC) &_chocR_dKernel, 4},
    {"_chocR_get_root_i", (DL_FUNC) &_chocR_get_root_i, 1},
    {"_chocR_rKernel", (DL_FUNC) &_chocR_rKernel, 4},
    {"_chocR_computeChoc", (DL_FUNC) &_chocR_computeChoc, 4},
    {"_chocR_computeIvlev", (DL_FUNC) &_chocR_computeIvlev, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_chocR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
